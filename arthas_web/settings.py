"""
Django settings for Arthas project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'clv1bc5cd+p2+$rx5*d^4z)skn&j(s2-il34xh=7a-l(kx+-ss'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    # 'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'arthas_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arthas_web.wsgi.application'

# Customized Configuration.
MYSQL_CONF = {
    'host': '127.0.0.1',
    'name': '',
    'user': 'root',
    'password': '123456',
    'port': '3306'
}

REDIS_CONF = {
    'host': '127.0.0.1',
    'port': 6379,
}

IMPALA_CONF = {
    'host': '127.0.0.1',
    'port': 21050,
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

LOG_BASE = '/var/app/log/arthas'

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(name)s %(process)d %(thread)d [%(module)s.%(funcName)s line:%(lineno)d]: %(message)s'
        },
        'detail': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s'
        },
        'message_only': {
            'format': '%(asctime)s %(message)s'
        },
        'simple': {
            #           'format': '%(levelname)s %(asctime)s %(message)s'
            'format': '%(levelname)s %(asctime)s %(name)s [%(module)s.%(funcName)s line:%(lineno)d]: %(message)s'
        },
        'track': {
            'format': '%(asctime)s\t%(message)s'
        },
    },
    'handlers': {
        'service': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename':  os.path.join(LOG_BASE, 'service.log'),
        },
        'pref': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'message_only',
            'filename': os.path.join(LOG_BASE, 'pref.log'),
        },
        'template': {
            'level': 'INFO',
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': os.path.join(LOG_BASE, 'template.log'),
        },
        'console':{
            'level':'DEBUG',
            'class':'logging.StreamHandler',
            #           'formatter': 'verbose'
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['service'],
            'level': 'INFO',
            'propagate': True,
        },
        'prefs': {
            'handlers': ['pref'],
            'level': 'DEBUG',
        },
        'arthas_web': {
            'handlers': ['service', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'suds.client': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['service', 'console'],
        },
    }
}